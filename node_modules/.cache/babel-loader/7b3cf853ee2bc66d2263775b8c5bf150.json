{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\mucc\\\\my projects\\\\web\\\\lias\\\\firegram-final-files\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\mucc\\\\my projects\\\\web\\\\lias\\\\firegram-final-files\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:\\\\mucc\\\\my projects\\\\web\\\\lias\\\\firegram-final-files\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import{projectStorage,projectFirestore,timestamp}from'../firebase/config';var useStorage=function useStorage(file){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),url=_useState6[0],setUrl=_useState6[1];useEffect(function(){// references\nvar storageRef=projectStorage.ref(file.name);var collectionRef=projectFirestore.collection('images');storageRef.put(file).on('state_changed',function(snap){var percentage=snap.bytesTransferred/snap.totalBytes*100;setProgress(percentage);},function(err){setError(err);},/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var url,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return storageRef.getDownloadURL();case 2:url=_context.sent;createdAt=timestamp();_context.next=6;return collectionRef.add({url:url,createdAt:createdAt});case 6:setUrl(url);case 7:case\"end\":return _context.stop();}}},_callee);})));},[file]);return{progress:progress,url:url,error:error};};export default useStorage;","map":{"version":3,"sources":["D:/mucc/my projects/web/lias/firegram-final-files/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":"mhBAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,cAAT,CAAyBC,gBAAzB,CAA2CC,SAA3C,KAA4D,oBAA5D,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAU,eACKN,QAAQ,CAAC,CAAD,CADb,wCACpBO,QADoB,eACVC,WADU,8BAEDR,QAAQ,CAAC,IAAD,CAFP,yCAEpBS,KAFoB,eAEbC,QAFa,8BAGLV,QAAQ,CAAC,IAAD,CAHH,yCAGpBW,GAHoB,eAGfC,MAHe,eAK3BX,SAAS,CAAC,UAAM,CACd;AACA,GAAMY,CAAAA,UAAU,CAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB,CACA,GAAMC,CAAAA,aAAa,CAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB,CAEAJ,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,eAAxB,CAAyC,SAACC,IAAD,CAAU,CACjD,GAAIC,CAAAA,UAAU,CAAID,IAAI,CAACE,gBAAL,CAAwBF,IAAI,CAACG,UAA9B,CAA4C,GAA7D,CACAf,WAAW,CAACa,UAAD,CAAX,CACD,CAHD,CAGG,SAACG,GAAD,CAAS,CACVd,QAAQ,CAACc,GAAD,CAAR,CACD,CALD,sEAKG,2KACiBX,CAAAA,UAAU,CAACY,cAAX,EADjB,QACKd,GADL,eAEKe,SAFL,CAEiBtB,SAAS,EAF1B,uBAGKY,CAAAA,aAAa,CAACW,GAAd,CAAkB,CAAEhB,GAAG,CAAHA,GAAF,CAAOe,SAAS,CAATA,SAAP,CAAlB,CAHL,QAIDd,MAAM,CAACD,GAAD,CAAN,CAJC,sDALH,IAWD,CAhBQ,CAgBN,CAACL,IAAD,CAhBM,CAAT,CAkBA,MAAO,CAAEC,QAAQ,CAARA,QAAF,CAAYI,GAAG,CAAHA,GAAZ,CAAiBF,KAAK,CAALA,KAAjB,CAAP,CACD,CAxBD,CA0BA,cAAeJ,CAAAA,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    \n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    }, (err) => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      await collectionRef.add({ url, createdAt });\n      setUrl(url);\n    });\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}